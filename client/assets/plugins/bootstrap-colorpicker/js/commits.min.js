!function(t,e){t.ghcommits={repo_name:"mjaalnir/bootstrap-colorpicker",cache_enabled:!0,cache_ttl:7200,onload:{},callback:function(){},load:function(e,i){var o=this;if(e=e||10,o.onload=i||function(){},o.cache_enabled&&t.localStorage){var s="repo_commits",a=localStorage.getItem(s+"_expiration");a&&a<+new Date&&(localStorage.removeItem(s),localStorage.removeItem(s+"_expiration"),a=!1);var n=localStorage.getItem(s);if(n)return t.console&&console.info("Commit data feched from localStorage"),o.store(JSON.parse(n),!1),o.onload(o.data),void 0}o.query(e)},store:function(e,i){var o=this;o.data=e,i&&t.localStorage&&(localStorage.setItem("repo_commits",JSON.stringify(e)),localStorage.setItem("repo_commits_expiration",+new Date+1e3*o.cache_ttl))},query:function(t){var i=this,o="https://api.github.com/repos/"+i.repo_name+"/commits?per_page="+t;console.info("Fetching commit data from "+o),e.ajax({dataType:"jsonp",url:o,jsonpCallback:"ghcommits._jsonpcb"})},_jsonpcb:function(t){ghcommits.store(t.data,ghcommits.cache_enabled),ghcommits.onload(ghcommits.data)}},e(function(){try{ghcommits.load(10,function(t){t&&t.length>0&&e(t).each(function(t,i){e("#changelog ul").append(e("<li>").html("<b>"+i.commit.author.date.replace("T"," ").replace("Z","")+":</b> "+i.commit.message))})})}catch(t){}})}(window,window.jQuery);